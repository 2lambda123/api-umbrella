#!/usr/bin/env node
'use strict';

var _ = require('lodash'),
    ApiUser = require('../lib/models/api_user'),
    async = require('async'),
    crypto = require('crypto'),
    config = require('../lib/config'),
    csv = require('csv'),
    elasticsearch = require('elasticsearch'),
    fs = require('fs'),
    zlib = require('zlib'),
    logCleaner = require('../lib/log_processor/cleaner'),
    mime = require('mime'),
    moment = require('moment'),
    mongoConnect = require('../lib/mongo_connect'),
    url = require('url'),
    URLSafeBase64 = require('urlsafe-base64');

var MigrateLogs = function() {
  this.initialize.apply(this, arguments);
};

_.extend(MigrateLogs.prototype, {
  users: {},

  initialize: function() {
    this.logPaths = process.argv.slice(2);
    console.info(this.logPaths);
    if(!this.logPaths || this.logPaths.length === 0) {
      console.info('Path to router.log must be given');
      process.exit(1);
    }

    this.logPaths.forEach(function(logPath) {
      if(!fs.existsSync(logPath)) {
        console.info('Log file does not exist: ' + logPath);
        process.exit(1);
      }
    });

    this.elasticSearch = new elasticsearch.Client(_.cloneDeep(config.get('elasticsearch')));
    this.elasticSearchLogCleaner = new elasticsearch.Client(_.cloneDeep(config.get('elasticsearch')));

    async.series([
      mongoConnect.bind(this),
      this.fetchUsers.bind(this),
      this.migrate.bind(this),
    ], function(error) {
      if(error) {
        console.info(error);
        process.exit(1);
      }

      console.info('Finished processing all files');
      process.exit(0);
    });
  },

  fetchUsers: function(asyncSeriesCallback) {
    ApiUser.find(function(error, users) {
      users.forEach(function(user) {
        this.users[user.api_key] = user;
      }.bind(this));

      asyncSeriesCallback(null);
    }.bind(this));
  },

  migrate: function(asyncSeriesCallback) {
    async.eachSeries(this.logPaths, function(path, next) {
      var gunzip = zlib.createGunzip();
      console.info('Begin processing for ' + path);

      this.processQueue = async.queue(this.processRow.bind(this), 1);
      this.processQueue.drain = function() {
        console.info('Finished processing all items for ' + path);
        next();
      };


      var stream = fs.createReadStream(path);
      if(/\.gz$/.test(path)) {
        stream = stream.pipe(gunzip);
      }

      csv()
        .from
        .stream(stream)
        .transform(this.handleRows.bind(this))
        .on('error', function(error) {
          console.info('CSV PARSING ERROR: ', error);
        });
    }.bind(this), asyncSeriesCallback);
  },

  handleRows: function(row) {
    var routerName = row[1];
    if(routerName !== 'web_router') {
      return false;
    }

    var uid = row[0];
    var id = URLSafeBase64.encode(crypto.createHash('sha256').update(uid).digest('base64'));
    var log = {
      logged_at: parseFloat(row[3]),
      response_time: parseFloat(row[4]),
      backend_response_time: parseFloat(row[5]),
      request_size: parseInt(row[6], 10),
      response_size: parseInt(row[7], 10),
      response_status: parseInt(row[8], 10),
      request_ip: row[9],
      request_method: row[10],
      request_scheme: row[11],
      request_host: row[12],
      request_port: row[13],
      request_uri: row[14],
      request_user_agent: row[15],
    };

    var combined = {};
    var data = log;

    combined.request_at = moment.unix(data.logged_at - data.response_time).toISOString();
    combined.response_status = data.response_status;
    combined.response_size = data.response_size;
    combined.request_size = data.request_size;
    combined.response_time = data.response_time * 1000;

    if(combined.hasOwnProperty('backend_response_time')) {
      combined.proxy_overhead = data.backend_response_time * 1000 - combined.backend_response_time;
    }

    combined.request_ip = data.request_ip;
    combined.request_method = data.request_method;
    combined.request_url = data.request_scheme + '://' + data.request_host + data.request_uri;
    combined.request_user_agent = data.request_user_agent;

    var urlParts = url.parse(combined.request_url, true);
    var contentType = mime.lookup(urlParts.pathname);
    if(contentType !== 'application/octet-stream') {
      combined.response_content_type = mime.lookup(urlParts.pathname);
    }

    var apiKey = urlParts.query.api_key;
    if(apiKey) {
      combined.api_key = apiKey;
      var user = this.users[apiKey];
      if(user) {
        combined.user_id = user._id;
        combined.user_email = user.email;
      }
    }

    this.processQueue.push({
      id: id,
      uid: uid,
      combined: combined,
    });
  },

  processRow: function(task, next) {
    var id = task.id;
    var uid = task.uid;
    var combined = task.combined;

    async.waterfall([
      this.cleanRow.bind(this, id, uid, combined),
      this.indexRow.bind(this),
    ], next);
  },

  cleanRow: function(id, uid, combined, callback) {
    // console.time('log-cleaner-' + uid);
    logCleaner.all(this.elasticSearchLogCleaner, combined, function(error, combined) {
      // console.timeEnd('log-cleaner-' + uid);
      callback(error, id, uid, combined);
    }.bind(this));
  },

  indexRow: function(id, uid, combined, callback) {
    var index = 'api-umbrella-logs-write-' + config.environment + '-' + moment(combined.request_at).format('YYYY-MM');

    // console.time('elasticsearch-fetch-' + uid);
    this.elasticSearch.get({ index: index, type: 'log', id: id }, function(error, result) {
      // console.timeEnd('elasticsearch-fetch-' + uid);
      if(error && !result) { console.error(error); }

      if(result.exists) {
        var existing = result._source;
        var update = {};
        for(var key in combined) {
          var newValue = combined[key];
          var existingValue = existing[key];
          if(key === 'request_ip_location' || newValue === '-') {
            break;
          }

          if(newValue && !existingValue) {
            //console.info(id + ' - ' + combined.request_at + ' - Filling in missing field: ' + key + ' - ' + newValue);
            update[key] = newValue;
          } else if(newValue !== existingValue) {
            //console.info(id + ' - ' + combined.request_at + ' - Value mismatch: ' + key + ' - ' + existingValue + ' - ' + newValue);
            if(key === 'request_url' || key === 'request_path') {
              update[key] = newValue;
            }
          }
        }

        if(Object.keys(update).length > 0) {
          console.info(id + ' - ' + uid + ' - ' + combined.request_at + ' - Updating with new attributes ' + JSON.stringify(update) + ' - ' + JSON.stringify(existing));

          this.elasticSearch.update({ index: index, type: 'log', id: id, body: { doc: update } }, function(error) {
            if(error) {
              console.info('  ERROR: ' + error);
            } else {
              // console.info('  Updated');
            }

            callback(error);
          });
        } else {
          console.info(id + ' - ' + uid + ' - ' + combined.request_at + ' - Skipping, already exists ' + combined.request_url);
          callback();
        }
      } else {
        console.info(id + ' - ' + combined.request_at + ' - Indexing, missing');
        this.elasticSearch.index({ index: index, type: 'log', id: id, body: combined }, function(error) {
          if(error) {
            console.info('  ERROR: ' + error);
          } else {
            // console.info('  Indexed');
          }

          callback(error);
        });
      }
    }.bind(this));
  },
});

new MigrateLogs();
