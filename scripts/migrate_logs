#!/usr/bin/env node

var _ = require('underscore'),
    async = require('async'),
    crypto = require('crypto'),
    ElasticSearchClient = require('elasticsearchclient'),
    logCleaner = require('../lib/log_processor/cleaner'),
    mime = require('mime'),
    moment = require('moment'),
    MongoClient = require('mongodb').MongoClient,
    ObjectID = require('mongodb').ObjectID,
    URLSafeBase64 = require('urlsafe-base64');

var MigrateLogs = function() {
  this.initialize.apply(this, arguments);
}

_.extend(MigrateLogs.prototype, {
  users: {},
  commands: [],
  startTime: moment.utc("2013-06-01"),
  endTime: moment(),

  initialize: function() {
    // Set the global 'geodatadir' variable geoip-lite optionally reads from.
    global.geodatadir = "/opt/geoip-lite/data";

    this.elasticSearch = new ElasticSearchClient({
      "hosts": [
        {
          "host": process.env.ELASTIC,
          "port": 9200
        }
      ]
    });

    async.series([
      this.connectMongo.bind(this),
      this.fetchUsers.bind(this),
      this.migrate.bind(this),
    ], function(error) {
      if(error) {
        console.info(error);
      }
    });
  },

  connectMongo: function(asyncSeriesCallback) {
    MongoClient.connect(process.env.MONGO, this.handleConnectMongo.bind(this, asyncSeriesCallback));
  },

  handleConnectMongo: function(asyncSeriesCallback, error, db) {
    if(!error) {
      this.mongo = db;
      asyncSeriesCallback(null);
    } else {
      asyncSeriesCallback(error);
    }
  },

  fetchUsers: function(asyncSeriesCallback) {
    var mongoUsers = this.mongo.collection('api_users');
    mongoUsers.find().each(function(error, user) {
      if(user != null) {
        this.users[user.api_key] = user;
      } else {
        asyncSeriesCallback(null);
      }
    }.bind(this));
  },

  migrate: function(asyncSeriesCallback) {
    this.mongoLogs = this.mongo.collection('api_request_logs');

    this.chunkStartTime = this.startTime;
    async.whilst(function() {
      return this.chunkStartTime.isBefore(this.endTime);
    }.bind(this), this.processChunk.bind(this), function(error) {
      asyncSeriesCallback(error);
    });
  },

  processChunk: function(asyncWhilstCallback) {
    var timerStart = Date.now();

    var chunkEndTime = moment(this.chunkStartTime).add("hours", 1);

    console.info("== " + this.chunkStartTime.toString() + " - " + chunkEndTime.toString() + " ==");

    var startId = ObjectID.createFromTime(this.chunkStartTime.unix());
    var endId = ObjectID.createFromTime(chunkEndTime.unix());
    this.cursor = this.mongoLogs.find({
      "_id": { "$gte": startId, "$lt": endId }
    }).sort({ "_id": -1 });

    this.count = 0;
    this.cargo = async.cargo(this.bulkIndex.bind(this), 1000);

    this.cursor.each(function(error, oldLog) {
      if(error) {
        console.error(error);
        process.exit(1);
        return false;
      }

      if(oldLog != null) {
        this.count++;
        this.handleLog(oldLog);
      } else {
        var duration = (Date.now() - timerStart) / 1000;
        rate = this.count / duration;
        console.info("  Processed " + this.count + " in: " + duration + " seconds (" + rate + " records/second)");

        this.chunkStartTime = chunkEndTime;
        asyncWhilstCallback(null);
      }
    }.bind(this));
  },

  handleLog: function(oldLog) {
    var env = {};
    if(oldLog["env"]) {
      env = JSON.parse(oldLog["env"]);
    }

    var newLog = {
      //"_type": "log",
      "request_at": oldLog["requested_at"].toISOString(),
      "request_method": env["REQUEST_METHOD"],
      "request_url": "http://developer.nrel.gov" + env["REQUEST_URI"],
      "request_user_agent": env["HTTP_USER_AGENT"],
      "request_accept_encoding": env["HTTP_ACCEPT_ENCODING"],
      "request_ip": oldLog["ip_address"],
      "response_status": oldLog["response_status"],
      "response_content_type": mime.lookup(oldLog["path"]),
      "api_key": oldLog["api_key"],
    };

    if(newLog["api_key"]) {
      if(this.users[newLog["api_key"]]) {
        newLog["user_id"] = this.users[newLog["api_key"]]["_id"]
      }
    }

    logCleaner(this.elasticSearch, newLog);

    this.cargo.push(newLog);
  },

  bulkIndex: function(logs, callback) {
    var commands = [];

    for(var i = 0; i < logs.length; i++) {
      var log = logs[i];

      var uid = log["request_url"] + log["requested_at"];
      commands.push({
        "index": {
          "_index": 'api-umbrella-logs-' + log.request_at.substring(0, 10),
          "_type": "log",
          "_id": URLSafeBase64.encode(crypto.createHash('sha256').update(uid).digest('base64')),
        },
      });

      commands.push(log);
    }

    this.elasticSearch.bulk(commands).
      on("done", function() {
        callback();
      }).
      on("error", function(error) {
        console.error(error);
        process.exit(1);
        return false;
      }).exec();
  }
});

new MigrateLogs();
