global
  master-worker
  server-state-file <%- config["run_dir"] %>/haproxy-server-state
  log stdout format raw local0 debug
  stats socket <%- config["run_dir"] %>/haproxy.sock level admin expose-fd listeners
  tune.http.maxhdr 200
  tune.bufsize 65536

resolvers dns
  <% for index, nameserver in ipairs(config["dns_resolver"]["_nameservers_haproxy"]) do %>
    nameserver 'nameserver<%- index %>' '<%- nameserver %>'
  <% end %>
  hold valid 0s
  hold obsolete 0s
  hold other 0s
  hold refused 0s
  hold nx 0s
  hold timeout 0s

defaults
  mode http
  log global
  timeout connect <%- config["haproxy"]["_timeout_connect"] %>s
  timeout client <%- config["haproxy"]["_timeout_client"] %>s
  timeout server <%- config["haproxy"]["_timeout_server"] %>s
  # timeout http-keep-alive s
  # timeout http-request 
  option http-keep-alive
  option accept-invalid-http-request
  option accept-invalid-http-response
  # option httplog
  option clitcpka
  option srvtcpka
  option abortonclose
  option httplog
  option redispatch
  load-server-state-from-file global
  http-reuse safe
  compression algo gzip
  clitcpka-intvl 5s
  clitcpka-idle 5s
  clitcpka-cnt 60
  srvtcpka-idle 5s
  srvtcpka-intvl 5s
  srvtcpka-cnt 60
  retries 3
  retry-on conn-failure
  balance leastconn
  # log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

  default-server check resolve-opts allow-dup-ip resolve-prefer ipv4 resolvers dns verify required pool-max-conn <%- config["router"]["api_backends"]["keepalive_connections"] %> ca-file /etc/ssl/certs/ca-certificates.crt

<% if api_backends and website_backends then %>
  <% for _, api_backend in ipairs(api_backends) do %>
    backend 'api-backend-<%- api_backend["id"] %>'
      <% for _, server in ipairs(api_backend["servers"]) do %>
        server 'server-<%- server["id"] %>' <%- server["host"] %>:<%- server["port"] %> <% if api_backend["backend_protocol"] == "https" then %>ssl check-sni '<%- api_backend["backend_host"] %>' sni 'str(<%- api_backend["backend_host"] %>)' verifyhost '<%- api_backend["backend_host"] %>' verify none<% end %>
      <% end %>

      <% if api_backend["balance_algorithm"] == "least_conn" then %>
        balance leastconn
      <% elseif api_backend["balance_algorithm"] == "round_robin" then %>
        balance roundrobin
      <% elseif api_backend["balance_algorithm"] == "ip_hash" then %>
        balance source
      <% end %>
  <% end %>

  <% for _, website_backend in ipairs(website_backends) do %>
    backend 'website-backend-<%- website_backend["id"] %>'
      server server <%- website_backend["server_host"] %>:<%- website_backend["server_port"] %> <% if website_backend["backend_protocol"] == "https" then %>ssl check-sni '<%- website_backend["_backend_host"] %>' sni 'str(<%- website_backend["_backend_host"] %>)' verifyhost '<%- website_backend["_backend_host"] %>' verify none<% end %>
  <% end %>

  frontend router
    bind <%- config["haproxy"]["host"] %>:<%- config["haproxy"]["port"] %>

    capture request header X-Api-Umbrella-Request-ID len 20
    http-request set-src hdr(X-Api-Umbrella-Real-Ip)

    # acl x_api_umbrella_backend_authorization_header_present req.hdr(X-Api-Umbrella-Backend-Authorization) -m found
    # http-request set-header Authorization %[req.hdr(X-Api-Umbrella-Backend-Authorization)] if x_api_umbrella_backend_authorization_header_present
    # http-request del-header X-Api-Umbrella-Backend-Authorization if x_api_umbrella_backend_authorization_header_present

    # acl surrogate_control_header_present res.hdr(Surrogate-Control) -m found
    # http-response set-header X-Api-Umbrella-Orig-Cache-Control %[res.hdr(Cache-Control)] if surrogate_control_header_present
    # http-response set-header Cache-Control %[res.hdr(Surrogate-Control)] if surrogate_control_header_present

    <% for _, cookie_regex in ipairs(config["_strip_response_cookie_lines"]) do %>
      http-response replace-header Set-Cookie '<%- cookie_regex %>' 'x-api-umbrella-strip-cookie'
    <% end %>

    <% for _, api_backend in ipairs(api_backends) do %>
      acl 'api_backend_match_<%- api_backend["id"] %>' req.hdr(X-Api-Umbrella-Api-Backend-Id) -m str '<%- api_backend["id"] %>'
      use_backend 'api-backend-<%- api_backend["id"] %>' if 'api_backend_match_<%- api_backend["id"] %>'
    <% end %>

    <% for _, website_backend in ipairs(website_backends) do %>
      acl 'website_backend_match_<%- website_backend["id"] %>' req.hdr(X-Api-Umbrella-Website-Backend-Id) -m str '<%- website_backend["id"] %>'
      use_backend 'website-backend-<%- website_backend["id"] %>' if 'website_backend_match_<%- website_backend["id"] %>'
    <% end %>
<% end %>
