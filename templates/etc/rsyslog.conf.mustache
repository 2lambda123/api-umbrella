global(workDirectory="{{db_dir}}/rsyslog")

# Load Modules
module(load="imtcp" MaxSessions="500")
module(load="mmjsonparse")
module(load="mmutf8fix")
module(load="omelasticsearch")
module(load="omkafka")
module(load="omhttpfs")

# TCP Input
input(type="imtcp" address="{{rsyslog.host}}" port="{{rsyslog.port}}")

# Ensure we have only valid UTF-8 characters in the log message (otherwise
# ElasticSearch is unhappy).
action(type="mmutf8fix")

# Parse the JSON data out of the @cee-enhanced logs.
action(type="mmjsonparse")

# Define the ElasticSearch-based output.
# This aliases some of the logged fields to different names for backwards
# compatibility with the ElasticSearch data.
set $!usr!es!api_key = $!legacy_api_key;
set $!usr!es!gatekeeper_denied_code = $!denied_reason;
set $!usr!es!request_accept = $!request_accept;
set $!usr!es!request_accept_encoding = $!request_accept_encoding;
set $!usr!es!request_at = $!request_at;
set $!usr!es!request_basic_auth_username = $!request_basic_auth_username;
set $!usr!es!request_connection = $!request_connection;
set $!usr!es!request_content_type = $!request_content_type;
set $!usr!es!request_ip = $!request_ip;
set $!usr!es!request_ip_city = $!request_ip_city;
set $!usr!es!request_ip_country = $!request_ip_country;
set $!usr!es!request_ip_location = $!request_ip_location;
set $!usr!es!request_ip_region = $!request_ip_region;
set $!usr!es!request_method = $!request_method;
set $!usr!es!request_origin = $!request_origin;
set $!usr!es!request_referer = $!request_referer;
set $!usr!es!request_size = $!request_size;
set $!usr!es!request_url = $!request_url;
set $!usr!es!request_hierarchy = $!request_url_hierarchy;
set $!usr!es!request_host = $!request_url_host;
set $!usr!es!request_path = $!request_url_path;
set $!usr!es!request_query = $!legacy_request_url_query_hash;
set $!usr!es!request_scheme = $!request_url_scheme;
set $!usr!es!request_user_agent = $!request_user_agent;
set $!usr!es!request_user_agent_family = $!request_user_agent_family;
set $!usr!es!request_user_agent_type = $!request_user_agent_type;
set $!usr!es!response_age = $!response_age;
set $!usr!es!response_cache = $!response_cache;
set $!usr!es!response_content_encoding = $!response_content_encoding;
set $!usr!es!response_content_length = $!response_content_length;
set $!usr!es!response_content_type = $!response_content_type;
set $!usr!es!response_server = $!response_server;
set $!usr!es!response_size = $!response_size;
set $!usr!es!response_status = $!response_status;
set $!usr!es!response_transfer_encoding = $!response_transfer_encoding;
set $!usr!es!backend_response_time = $!timer_backend_response;
set $!usr!es!internal_gatekeeper_time = $!timer_internal;
set $!usr!es!proxy_overhead = $!timer_proxy_overhead;
set $!usr!es!response_time = $!timer_response;
set $!usr!es!user_email = $!legacy_user_email;
set $!usr!es!user_id = $!user_id;
set $!usr!es!user_registration_source = $!legacy_user_registration_source;

# Define templates for ElasticSearch output.
template(name="elasticsearch-index" type="string" string="api-umbrella-logs-v1-%timereported:1:10:date-rfc3339%")
template(name="elasticsearch-id" type="subtree" subtree="$!id")
template(name="elasticsearch-json-record" type="list") {
  property(name="$!usr!es")
}

# Output to ElasticSearch.
# A disk-assisted memory queue is used for buffering.
local0.info action(
  type="omelasticsearch"
  server="{{elasticsearch._first_server.host}}"
  serverport="{{elasticsearch._first_server.port}}"
  searchIndex="elasticsearch-index"
  dynSearchIndex="on"
  searchType="log"
  template="elasticsearch-json-record"
  bulkmode="on"
  bulkId="elasticsearch-id"
  dynBulkId="on"
  asyncrepl="off"
  queue.type="LinkedList"
  queue.filename="queue-elasticsearch"
  queue.checkpointinterval="10"
  queue.syncqueuefiles="on"
  queue.saveonshutdown="on"
  queue.highwatermark="100"
  queue.lowwatermark="50"
  action.resumeRetryCount="-1"
)

# Define the SQL-based output.
set $!usr!sql!denied_reason = $!denied_reason;
set $!usr!sql!id = $!id;
set $!usr!sql!request_accept = $!request_accept;
set $!usr!sql!request_accept_encoding = $!request_accept_encoding;
set $!usr!sql!request_at = $!request_at;
set $!usr!sql!request_at_tz_date = $!request_at_tz_date;
set $!usr!sql!request_at_tz_hour = $!request_at_tz_hour;
set $!usr!sql!request_at_tz_minute = $!request_at_tz_minute;
set $!usr!sql!request_at_tz_month = $!request_at_tz_month;
set $!usr!sql!request_at_tz_offset = $!request_at_tz_offset;
set $!usr!sql!request_at_tz_week = $!request_at_tz_week;
set $!usr!sql!request_at_tz_year = $!request_at_tz_year;
set $!usr!sql!request_basic_auth_username = $!request_basic_auth_username;
set $!usr!sql!request_connection = $!request_connection;
set $!usr!sql!request_content_type = $!request_content_type;
set $!usr!sql!request_ip = $!request_ip;
set $!usr!sql!request_ip_city = $!request_ip_city;
set $!usr!sql!request_ip_country = $!request_ip_country;
set $!usr!sql!request_ip_location = $!request_ip_location;
set $!usr!sql!request_ip_region = $!request_ip_region;
set $!usr!sql!request_method = $!request_method;
set $!usr!sql!request_origin = $!request_origin;
set $!usr!sql!request_referer = $!request_referer;
set $!usr!sql!request_size = $!request_size;
set $!usr!sql!request_url_host = $!request_url_host;
set $!usr!sql!request_url_path = $!request_url_path;
set $!usr!sql!request_url_path_level1 = $!request_url_path_level1;
set $!usr!sql!request_url_path_level2 = $!request_url_path_level2;
set $!usr!sql!request_url_path_level3 = $!request_url_path_level3;
set $!usr!sql!request_url_path_level4 = $!request_url_path_level4;
set $!usr!sql!request_url_path_level5 = $!request_url_path_level5;
set $!usr!sql!request_url_path_level6 = $!request_url_path_level6;
set $!usr!sql!request_url_query = $!request_url_query;
set $!usr!sql!request_url_scheme = $!request_url_scheme;
set $!usr!sql!request_user_agent = $!request_user_agent;
set $!usr!sql!request_user_agent_family = $!request_user_agent_family;
set $!usr!sql!request_user_agent_type = $!request_user_agent_type;
set $!usr!sql!response_age = $!response_age;
set $!usr!sql!response_cache = $!response_cache;
set $!usr!sql!response_content_encoding = $!response_content_encoding;
set $!usr!sql!response_content_length = $!response_content_length;
set $!usr!sql!response_content_type = $!response_content_type;
set $!usr!sql!response_server = $!response_server;
set $!usr!sql!response_size = $!response_size;
set $!usr!sql!response_status = $!response_status;
set $!usr!sql!response_transfer_encoding = $!response_transfer_encoding;
set $!usr!sql!timer_backend_response = $!timer_backend_response;
set $!usr!sql!timer_internal = $!timer_internal;
set $!usr!sql!timer_proxy_overhead = $!timer_proxy_overhead;
set $!usr!sql!timer_response = $!timer_response;
set $!usr!sql!user_id = $!user_id;

# Define templates for SQL output via TSV records.
template(name="sql-tsv-record" type="list") {
  property(name="$!usr!sql!request_at")
  constant(value="\t") property(name="$!usr!sql!id")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_offset")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_year")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_month")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_week")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_date")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_hour")
  constant(value="\t") property(name="$!usr!sql!request_at_tz_minute")
  constant(value="\t") property(name="$!usr!sql!user_id")
  constant(value="\t") property(name="$!usr!sql!denied_reason")
  constant(value="\t") property(name="$!usr!sql!request_method")
  constant(value="\t") property(name="$!usr!sql!request_url_scheme")
  constant(value="\t") property(name="$!usr!sql!request_url_host")
  constant(value="\t") property(name="$!usr!sql!request_url_port")
  constant(value="\t") property(name="$!usr!sql!request_url_path")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level1")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level2")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level3")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level4")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level5")
  constant(value="\t") property(name="$!usr!sql!request_url_path_level6")
  constant(value="\t") property(name="$!usr!sql!request_url_query")
  constant(value="\t") property(name="$!usr!sql!request_ip")
  constant(value="\t") property(name="$!usr!sql!request_ip_country")
  constant(value="\t") property(name="$!usr!sql!request_ip_region")
  constant(value="\t") property(name="$!usr!sql!request_ip_city")
  constant(value="\t") property(name="$!usr!sql!request_ip_lat")
  constant(value="\t") property(name="$!usr!sql!request_ip_lon")
  constant(value="\t") property(name="$!usr!sql!request_user_agent")
  constant(value="\t") property(name="$!usr!sql!request_user_agent_type")
  constant(value="\t") property(name="$!usr!sql!request_user_agent_family")
  constant(value="\t") property(name="$!usr!sql!request_size")
  constant(value="\t") property(name="$!usr!sql!request_accept")
  constant(value="\t") property(name="$!usr!sql!request_accept_encoding")
  constant(value="\t") property(name="$!usr!sql!request_content_type")
  constant(value="\t") property(name="$!usr!sql!request_connection")
  constant(value="\t") property(name="$!usr!sql!request_origin")
  constant(value="\t") property(name="$!usr!sql!request_referer")
  constant(value="\t") property(name="$!usr!sql!request_basic_auth_username")
  constant(value="\t") property(name="$!usr!sql!response_status")
  constant(value="\t") property(name="$!usr!sql!response_content_type")
  constant(value="\t") property(name="$!usr!sql!response_content_length")
  constant(value="\t") property(name="$!usr!sql!response_content_encoding")
  constant(value="\t") property(name="$!usr!sql!response_transfer_encoding")
  constant(value="\t") property(name="$!usr!sql!response_server")
  constant(value="\t") property(name="$!usr!sql!response_cache")
  constant(value="\t") property(name="$!usr!sql!response_age")
  constant(value="\t") property(name="$!usr!sql!response_size")
  constant(value="\t") property(name="$!usr!sql!timer_response")
  constant(value="\t") property(name="$!usr!sql!timer_backend_response")
  constant(value="\t") property(name="$!usr!sql!timer_internal")
  constant(value="\t") property(name="$!usr!sql!timer_proxy_overhead")
  constant(value="\t") property(name="$!usr!sql!log_imported")
}

# Output to Kafka.
# A disk-assisted memory queue is used for buffering.
local0.info action(
  type="omkafka"
  broker=[{{kafka._rsyslog_broker}}]
  topic="{{kafka.topic}}"
  template="sql-tsv-record"
  queue.type="LinkedList"
  queue.filename="queue-kafka"
  queue.checkpointinterval="10"
  queue.syncqueuefiles="on"
  queue.saveonshutdown="on"
  queue.highwatermark="100"
  queue.lowwatermark="50"
  action.resumeRetryCount="-1"
)

# Output to local file for redundancy until we prove the new system out.
template(name="sql-json-record" type="list") {
  property(name="$!usr!sql") constant(value="\n")
}
local0.info action(
  type="omfile"
  file="{{log_dir}}/rsyslog/requests.log"
  template="sql-json-record"
  queue.type="LinkedList"
  queue.filename="queue-file"
  queue.checkpointinterval="10"
  queue.syncqueuefiles="on"
  queue.saveonshutdown="on"
  queue.highwatermark="100"
  queue.lowwatermark="50"
  action.resumeRetryCount="-1"
)
