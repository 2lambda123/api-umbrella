# If a "Surrogate-Control" header is present, shift that onto the
# "Cache-Control" header temporarily so that Traffic Server parses the
# surrogate header for TTL information.
#
# If a real "Cache-Control" header is also present, move that to a temporary
# X-Api-Umbrella-Orig-Cache-Control header.
cond %{READ_RESPONSE_HDR_HOOK}
cond %{HEADER:Surrogate-Control} /.+/
add-header X-Api-Umbrella-Orig-Cache-Control %{HEADER:Cache-Control}
rm-header Cache-Control
add-header Cache-Control %{HEADER:Surrogate-Control} [L]

# When dealing with "Surrogate-Control" headers, cleanup the response before
# sending it to the client.
#
# Remove the "Surrogate-Control" header (since that's for internal use only),
# and restore the real "Cache-Control" header if one was originally present
# (temporarily stored on the "X-Api-Umbrella-Orig-Cache-Control" header).
cond %{SEND_RESPONSE_HDR_HOOK}
cond %{HEADER:Surrogate-Control} /.+/
rm-header Cache-Control
rm-header Surrogate-Control
add-header Cache-Control %{HEADER:X-Api-Umbrella-Orig-Cache-Control}
rm-header X-Api-Umbrella-Orig-Cache-Control [L]

# Force requests that pass along an "Authorization" header to never be cached
# (since we don't want to accidentally cache a protected response). Varnish
# defaults to this behavior, but TrafficServer does not, so this little rewrite
# force that non-cacheable behavior here.
cond %{READ_RESPONSE_HDR_HOOK}
cond %{CLIENT-HEADER:Authorization} /.+/
rm-header Cache-Control
add-header Cache-Control "max-age=0, private, must-revalidate" [L]
