set $x_api_umbrella_request_id $txid;
set $router_name "initial_router";
access_log {{log_dir}}/router.log api_umbrella_initial_router_log buffer=32k flush=10s;
access_log syslog:server=127.0.0.1:{{router.log_listener.port}} api_umbrella_initial_router_log;

proxy_set_header X-Api-Umbrella-Request-ID $txid;

keepalive_timeout 10s;

# Normalize the Accept-Encoding header to increase cache hit rates.
# We're not currently using TrafficServer, but this is based on what it does by
# default:
# https://docs.trafficserver.apache.org/en/latest/reference/configuration/records.config.en.html?highlight=gzip#proxy-config-http-normalize-ae-gzip 
proxy_set_header Accept-Encoding $normalized_accept_encoding;

# Remove the legacy /api/ prefix from all API urls. Now we assume API URLs
# are all top-level.
rewrite ^/api(/.*) $1 break;

# Don't buffer proxied requests to allow for streaming APIs.
proxy_buffering off;

# If the backend only returns gzipped responses, decompress them as
# appropriate to meet the Accept headers of the current client.
gunzip on;

access_by_lua_file 'conf/access.lua';

set $api_umbrella_backend_scheme '';
set $api_umbrella_backend_host '';
set $api_umbrella_backend_id '';

content_by_lua '
  --ledge:config_set("resty_upstream", ngx.var.api_umbrella_backend_id)
  ledge:bind("origin_fetched", function(res)
    if res.header["Surrogate-Control"] then
      res.header["X-Orig-Cache-Control"] = res.header["Cache-Control"]
      res.header["Cache-Control"] = res.header["Surrogate-Control"]
    end
  end)
  ledge:bind("response_ready", function(res)
    if res.header["Surrogate-Control"] then
      res.header["Surrogate-Control"] = nil
      res.header["Cache-Control"] = res.header["X-Orig-Cache-Control"]
    end
  end)
  ledge:run()
';
