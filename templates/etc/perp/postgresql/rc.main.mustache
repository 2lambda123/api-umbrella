#!/usr/bin/env bash
set -e -u

# Redirect stderr to stdout
exec 2>&1

umask "{{umask}}"

if [ "${1}" = "start" ]; then
  echo "starting ${2}..."
  api_umbrella_user="{{user}}"
  api_umbrella_group="{{group}}"

  run_args=("-e" "rc.env")
  if [ -n "$api_umbrella_user" ]; then
    run_args+=("-u" "$api_umbrella_user")
  fi

  dirs=("{{db_dir}}/postgresql" "{{run_dir}}/postgresql_startup")
  mkdir -p "${dirs[@]}"
  chmod 700 "${dirs[@]}"
  if [ -n "$api_umbrella_user" ]; then
    chown $api_umbrella_user:$api_umbrella_group "${dirs[@]}"
  fi

  if [ ! -f "{{db_dir}}/postgresql/PG_VERSION" ]; then
    runtool "${run_args[@]}" initdb -D "{{db_dir}}/postgresql"
  fi

  app_env="{{app_env}}"
  if [ "$app_env" = "development" ]; then
    {
      echo "local all all trust"
      echo "host all all 127.0.0.1/32 trust"
      echo "host all all ::1/128 trust"
      echo "local replication all trust"
      echo "host replication all 127.0.0.1/32 trust"
      echo "host replication all ::1/128 trust"
      echo "host all all all md5"
    } > "{{db_dir}}/postgresql/pg_hba.conf"
  fi

  runtool "${run_args[@]}" pg_ctl -D "{{db_dir}}/postgresql" -o "-c 'listen_addresses=' -c 'unix_socket_directories={{run_dir}}/postgresql_startup' -c 'unix_socket_permissions=0700'" -w start
  export PGHOST="{{run_dir}}/postgresql_startup"
  export PGDATABASE="postgres"
  runtool "${run_args[@]}" psql -t -c "SELECT 1 FROM pg_roles WHERE rolname = '{{postgresql.migrations.username}}'" | grep -q 1 || runtool "${run_args[@]}" psql -c "CREATE ROLE \"{{postgresql.migrations.username}}\" WITH LOGIN PASSWORD '{{postgresql.migrations.password}}'"
  runtool "${run_args[@]}" psql -t -c "SELECT 1 FROM pg_roles WHERE rolname = '{{postgresql.username}}'" | grep -q 1 || runtool "${run_args[@]}" psql -c "CREATE ROLE \"{{postgresql.username}}\" WITH LOGIN PASSWORD '{{postgresql.password}}' ADMIN \"{{postgresql.migrations.username}}\""
  runtool "${run_args[@]}" psql -t -c "SELECT 1 FROM pg_roles WHERE rolname = '{{postgresql.auto_ssl.username}}'" | grep -q 1 || runtool "${run_args[@]}" psql -c "CREATE ROLE \"{{postgresql.auto_ssl.username}}\" WITH LOGIN PASSWORD '{{postgresql.auto_ssl.password}}' ADMIN \"{{postgresql.migrations.username}}\""
  runtool "${run_args[@]}" psql -t -c "SELECT 1 FROM pg_database WHERE datname = '{{postgresql.database}}'" | grep -q 1 || (runtool "${run_args[@]}" psql -c "CREATE DATABASE {{postgresql.database}} WITH OWNER = \"{{postgresql.migrations.username}}\"" && runtool "${run_args[@]}" psql -d "{{postgresql.database}}" -f "{{_src_root_dir}}/db/schema.sql")
  unset PGHOST
  unset PGDATABASE
  runtool "${run_args[@]}" pg_ctl -D "{{db_dir}}/postgresql" -m fast -w stop

  exec \
    runtrap postgresql "${0}" \
    runtool "${run_args[@]}" \
    postgres -D "{{db_dir}}/postgresql" -c "listen_addresses={{postgresql.embedded_server_config.listen_addresses}}" -c "port={{postgresql.embedded_server_config.port}}"
fi

# perpboot sends SIGTERM signals on shutdown, but let's exit with SIGINT for
# faster postgresql shutdowns.
if [ "${1}" = "trap" ] && [ "${4}" = "15" ]; then
  echo "stopping ${2}..."
  kill -2 "${3}"
fi

exit 0
