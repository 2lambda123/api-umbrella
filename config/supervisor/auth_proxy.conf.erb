[program:<%= deploy_name %>-auth_proxy]
; Run 4 auth_proxy instances.
numprocs=4

; Start each proxymachine instance with ports starting at 50000.
; Execute proxymachine via RVM and Bundler. 
directory=<%=current_path %>/auth_proxy
environment=PATH=/opt/rbenv/shims:/opt/rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,RACK_ENV=<%= rails_env %>
command=/opt/rbenv/shims/bundle exec proxymachine --config <%= current_path %>/auth_proxy/proxymachine_config.rb --host 127.0.0.1 --port 50%(process_num)03d

; Name each process by the port number, eg "auth_proxy_50000",
; "auth_proxy_50001"
process_name=%(program_name)s_50%(process_num)03d

; Always keep running.
autostart=true
autorestart=true

; It can take longer for the the proxy to fully startup, so set a longer
; startup time.
startsecs=10

; Graceful shutdown, remaining open `stopwaitsecs` seconds for open connections
; to disconnect.
stopsignal=QUIT

; Eventually we have to kill off any open connections so we can restart, but
; we'll give them quite a while.
stopwaitsecs=90

; Run as the web user.
user=www-data-local

; Log both stdout and stderr to the same log file. One log file per
; proxymachine instance running on each port.
redirect_stderr=true
stdout_logfile=<%= current_path %>/log/%(program_name)s_50%(process_num)03d.log

; Don't rotate based on file size. We'll rotate externally using logrotate.
logfile_maxbytes=0

; FIXME: GSA TEMPORARY DEMO: Separate auth proxy for GSA.
[program:<%= deploy_name %>-gsa_auth_proxy]
; Run 2 auth_proxy instances.
numprocs=2

; Start each proxymachine instance with ports starting at 56000.
; Execute proxymachine via RVM and Bundler. 
directory=<%=current_path %>/auth_proxy
; FIXME: Remove logic once everything's on the new setup using rbenv.
environment=PATH=/opt/rbenv/shims:/opt/rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,RACK_ENV=gsa_<%= rails_env %>
command=/opt/rbenv/shims/bundle exec proxymachine --config <%= current_path %>/auth_proxy/proxymachine_config.rb --host 127.0.0.1 --port 56%(process_num)03d

; Name each process by the port number, eg "auth_proxy_56000",
; "auth_proxy_56001"
process_name=%(program_name)s_56%(process_num)03d

; Always keep running.
autostart=true
autorestart=true

; It can take longer for the the proxy to fully startup, so set a longer
; startup time.
startsecs=10

; Graceful shutdown, remaining open `stopwaitsecs` seconds for open connections
; to disconnect.
stopsignal=QUIT

; Eventually we have to kill off any open connections so we can restart, but
; we'll give them quite a while.
stopwaitsecs=90

; Run as the web user.
user=www-data-local

; Log both stdout and stderr to the same log file. One log file per
; proxymachine instance running on each port.
redirect_stderr=true
stdout_logfile=<%= current_path %>/log/%(program_name)s_56%(process_num)03d.log

; Don't rotate based on file size. We'll rotate externally using logrotate.
logfile_maxbytes=0

; Define a group so everything in this deployment can be controlled together.
[group:<%= deploy_name %>]
programs=<%= deploy_name %>-auth_proxy,<%= deploy_name %>-gsa_auth_proxy
