# Authentication Backend
#
# These backend proxy servers authenticate all the /api requests.
#
# FIXME: HAProxy 1.5 or 1.6?
# We have two separate backends to handle response logic that depends on the
# incoming request (we need to add the "Access-Control-Allow-Origin" header for
# public APIs, but not internal-only APIs. This could be abstracted into a
# separate front-end if the backend logic becomes too redundant. Or this should
# be doable in a future version of HAProxy when there will apparently be sticky pattern
# matching between request and response:
# http://permalink.gmane.org/gmane.comp.web.haproxy/8154
# http://www.mail-archive.com/haproxy@formilux.org/msg05719.html
#
# Or switch all this to Ruby once we switch from proxymachine to em-proxy.

# For handling internal-only APIs
backend gatekeeper_farm_internal_apis
  # FIXME: Internal APIs should be blocked from external access. But this is
  # trickier than I antipciated in HAProxy, since it's difficult to determine
  # the source IP address (src matches the actual source, while hdr_ip matches
  # things like X-Forwarded-For, but on devdev we don't have the WAF, while in
  # production we do).
  #
  # This would be much simpler to implemenet in Ruby once we switch from
  # proxymachine to em-proxy.
  #
  # acl source_match_internal_network hdr_ip -f <%= File.join(latest_release, "config/haproxy/api_router_matches/internal_ips.lst") %>
  # block unless source_match_internal_network

  balance roundrobin
  server gatekeeper1 127.0.0.1:50000

  # Retry connections 30 times (so 30 seconds). This lets the the proxymachine
  # servers restart without dropping any connection.
  retries 30

# For handling public APIs
backend gatekeeper_farm_public_apis
  balance roundrobin
  server gatekeeper1 127.0.0.1:50000

  # Retry connections 30 times (so 30 seconds). This lets the the proxymachine
  # servers restart without dropping any connection.
  retries 30

  # Modify public API responses to add CORS headers. This should be safe for any public APIs.
  #
  # FIXME: This should probably be done only if this header doesn't already
  # exist in the response. But I don't think HAProxy can currently create ACLs
  # based on *response* headers, so I don't think this is possible. Yet another
  # reason all this logic should probably be moved inside Ruby once we switch
  # from proxymachine to em-proxy.
  rspadd Access-Control-Allow-Origin:\ *
