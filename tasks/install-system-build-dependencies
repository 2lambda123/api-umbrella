#!/usr/bin/env bash

set -Eeuxo pipefail
source ./tasks/helpers.sh
source ./tasks/helpers/detect_os_release.sh

# shellcheck source=build/package_dependencies.sh
source "$SOURCE_DIR/build/package_dependencies.sh"

install_dependencies=("${all_build_dependencies[@]}")
if [ "${INSTALL_TEST_DEPENDENCIES:-}" == "true" ]; then
  install_dependencies=("${all_dependencies[@]}")
fi

detect_os_release
if [[ "$ID_NORMALIZED" == "rhel" && "$VERSION_ID" == "7" ]]; then
  # Dependencies for GCC 7+ for compiling TrafficServer (C++17 required).
  yum -y install centos-release-scl

  yum -y install "${install_dependencies[@]}"
  # Ensure the packages got installed, since yum's exit code isn't always
  # useful: http://stackoverflow.com/a/22393088
  rpm --query --queryformat "" "${install_dependencies[@]}"
elif [[ "$ID_NORMALIZED" == "debian" ]]; then
  # Dependencies for GCC 7+ or Clang 5+ for compiling TrafficServer (C++17
  # required).
  if [[ "$ID" == "debian" && "$VERSION_ID" == "9" ]]; then
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install curl ca-certificates gnupg
    curl -sS https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
    if [[ "$ID" == "debian" && "$VERSION_ID" == "8" ]]; then
      echo "deb http://apt.llvm.org/jessie/ llvm-toolchain-jessie-7 main" > /etc/apt/sources.list.d/api-umbrella-llvm.list
    else
      echo "deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-7 main" > /etc/apt/sources.list.d/api-umbrella-llvm.list
    fi
  fi

  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install "${install_dependencies[@]}"
else
  echo "Unknown build system"
  exit 1
fi

if [ "${INSTALL_TEST_DEPENDENCIES:-}" == "true" ]; then
  if [ "$ID" == "debian" ]; then
    # Add Chrome for integration tests.
    if [ "$TARGETARCH" == "amd64" ]; then
      apt-get update
      DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install curl gnupg2 unzip ca-certificates
      curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor > /usr/share/keyrings/google-chrome.gpg
      echo "deb [signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
      apt-get update
      DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install google-chrome-stable
      google-chrome --version

      CHROME_VERSION="$(google-chrome --version)"
      CHROMEDRIVER_VERSION="${CHROME_VERSION//[^0-9.]/}"
      curl -fsSL "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip" -o "/tmp/chromedriver-linux64.zip"
      unzip -o -j -d /usr/local/bin "/tmp/chromedriver-linux64.zip" "*/chromedriver"
      chromedriver --version
      rm "/tmp/chromedriver-linux64.zip"
    else
      # For ARM platforms, Chrome stable doesn't exist, so use Chromium
      # instead. chromedriver also doesn't exist, so use Electron's ARM builds
      # instead.
      CHROMIUM_VERSION="115.*"
      CHROMEDRIVER_VERSION="25.6.0"
      printf "Package: chromium*\nPin: version %s\nPin-Priority: 999\n" "$CHROMIUM_VERSION" > /etc/apt/preferences.d/chromium
      apt-get update
      apt-get -y --no-install-recommends install chromium curl unzip
      chromium --version

      curl -fsSL -o "/tmp/chromedriver-v${CHROMEDRIVER_VERSION}-linux.zip" "https://github.com/electron/electron/releases/download/v${CHROMEDRIVER_VERSION}/chromedriver-v${CHROMEDRIVER_VERSION}-linux-${TARGETARCH}.zip"
      unzip -o -d /usr/local/bin "/tmp/chromedriver-v${CHROMEDRIVER_VERSION}-linux.zip" chromedriver
      chromedriver --version
      rm "/tmp/chromedriver-v${CHROMEDRIVER_VERSION}-linux.zip"
    fi
  fi
fi
