{{input requireHttps as='select'
  value='requireHttps'
  class='row-fluid'
  labelTranslation='admin.api.settings.require_https'
  tooltipClass='qtip-wide'
  tooltipTranslation='admin.api.settings.require_https_tooltip_markdown'
  collection='requireHttpsOptions'
  optionValuePath='content.id'
  optionLabelPath='content.name'
  inputConfig='class:span12'}}
{{input disableApiKey as='select'
  value='disableApiKey'
  class='row-fluid'
  label='API Key Checks'
  collection='disableApiKeyOptions'
  optionValuePath='content.id'
  optionLabelPath='content.name'
  inputConfig='class:span12'}}
{{input apiKeyVerificationLevel as='select'
  value='apiKeyVerificationLevel'
  class='row-fluid'
  labelTranslation='admin.api.settings.api_key_verification_level'
  collection='apiKeyVerificationLevelOptions'
  optionValuePath='content.id'
  optionLabelPath='content.name'
  inputConfig='class:span12'}}

{{#view Admin.SelectizeView valueBinding='requiredRolesString' contentBinding='roleOptions' optionValuePath='id' optionLabelPath='id'}}
  {{input requiredRolesString
    class='row-fluid'
    label='Required Roles'}}
{{/view}}

<div class="control-group">
  <div class="control-label">
    <label>Pass API Key to Backend (deprecated)</label>
    {{tooltip-field title="<p>Whether to pass the user's api key to this API backend.</p><p><strong><em>Deprecated:</em></strong> This is deprecated and support of this will be removed in the future. Enabling either option is not recommend.</p><p>If your API backend needs to uniquely reference the requesting user, use the <code>X-Api-User-Id</code> HTTP header instead.</p><p><em>Note:</em> Passing via GET query parameter with render API Umbrella's HTTP caching layer mostly ineffectual (since the cache will be maintained per api key)."}}
  </div>
  <div class="controls">
    <label class="checkbox">
      {{view Ember.Checkbox checkedBinding='passApiKeyHeader'}}
      Via HTTP header
    </label>
    <label class="checkbox">
      {{view Ember.Checkbox checkedBinding='passApiKeyQueryParam'}}
      Via GET query parameter
    </label>
  </div>
</div>

{{render 'apis/settings_rate_limit_fields' this}}

{{input defaultResponseHeadersString as='text'
  class='row-fluid'
  label='Default Response Headers'
  placeholder='X-Example-Header: value'
  tooltip='<p>Define header values that will be set in the response regardless of whether the header is already set in the response.</p>
<p>For example, to set default CORS headers on all responses that don\'t explicitly set their own CORS headers:</p>
<pre>Access-Control-Allow-Origin: *</pre>'
  inputConfig='class:span12'}}
{{input overrideResponseHeadersString as='text'
  class='row-fluid'
  label='Override Response Headers'
  placeholder='X-Example-Header: value'
  tooltip='<p>Define header values that will be set in the response regardless of whether the header is already set in the response.</p>
<p>For example, to force CORS headers on all responses:</p>
<pre>Access-Control-Allow-Origin: *</pre>'
  inputConfig='class:span12'}}
