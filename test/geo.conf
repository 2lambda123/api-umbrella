daemon off;
#worker_processes  1;
worker_processes  4;
error_log /tmp/geo-error.log;
events {
  worker_connections 1024;
}
http {
  lua_package_path '/vagrant/lua-integration/src/?.lua;/vagrant/lua-integration/vendor/share/lua/5.1/?.lua;/vagrant/lua-integration/vendor/share/lua/5.1/?/init.lua;;';
  lua_package_cpath '/vagrant/lua-integration/vendor/lib/lua/5.1/?.so;;';

  #log_format geoapi '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" - geoip2_data_country_iso_code: $geoip2_data_country_iso_code - geoip2_data_subdivisions_name: $geoip2_data_subdivisions_name - geoip2_data_latitude: $geoip2_data_latitude - geoip2_data_longitude: $geoip2_data_longitude';


  set_real_ip_from 127.0.0.1;

  #geoip_city            /vagrant/GeoLiteCity.dat;
  #log_format geo '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" - GEO - COUNTRY: $geoip_city_country_code - STATE: $geoip_region - CITY: $geoip_city - LATITUDE: $geoip_latitude - LONGITUDE: $geoip_longitude';
  #access_log /tmp/geo-access.log geo;
  #map $geoip_region $allowed_country {
  #  default yes;
  #  CA no;
  #}

  geoip2 /vagrant/GeoLite2-City.mmdb {
    $geoip2_data_country_iso_code country iso_code;
    $geoip2_data_subdivisions_code subdivisions 0 iso_code;
    $geoip2_data_city_name city names en;
    $geoip2_data_latitude location latitude;
    $geoip2_data_longitude location longitude;
  }
  #log_format geo2 '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" - GEO2 - COUNTRY: $geoip2_data_country_iso_code - STATE: $geoip2_data_subdivisions_code - CITY: $geoip2_data_city_name - LATITUDE: $geoip2_data_latitude - LONGITUDE: $geoip2_data_longitude';
  #access_log /tmp/geo-access.log geo2;
  #map $geoip2_data_subdivisions_code $allowed_country {
  #  default yes;
  #  CA no;
  #}

  server {
    #access_by_lua '
    #  if ngx.var.geoip_region == "CA" then
    #    ngx.exit(403)
    #  end
    #';
    access_by_lua '
      if ngx.var.geoip2_data_subdivisions_code == "CA" then
        ngx.exit(403)
      end
    ';


    #access_by_lua '
    #  local cjson = require "cjson"
    #  local http = require "resty.http"

    #  local httpc = http.new()
    #  local res, err = httpc:request_uri("http://127.0.0.1:8181/json/" .. ngx.var.remote_addr)
    #  if not res then
    #    ngx.say("failed to request: ", err)
    #    return
    #  end

    #  local response = cjson.decode(res.body)
    #  if response["region_code"] == "CA" then
    #    ngx.exit(403)
    #  end
    #';

    listen 8080;
    location / {
      #if ($allowed_country = no) {
      #  return 403;
      #}

      default_type text/html;
      echo 'hello';
    }
  }

  #log_format geoapi '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" - GEO2 - COUNTRY: $geoip2_data_country_iso_code - STATE: $geoip2_data_subdivisions_code - CITY: $geoip2_data_city_name - LATITUDE: $geoip2_data_latitude - LONGITUDE: $geoip2_data_longitude';
  #access_log /tmp/geo-access.log geoapi;
  access_log /tmp/geo-access.log;
}
